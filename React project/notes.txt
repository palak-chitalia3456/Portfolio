*in node_modules folder*
@babel- babel is a transpiler(is a transformation tool). it will take jsx code to browser readable code.
search in google about babel


in react we call all the section in html as components
div is an element but when we combine div,its children it became component.


vite
        vite is another built tool that is now new norm
        because vite is more faster and reliable than CRA.
        search in google vite.js

setting up react app with vite and we will be working with vite only because it supports vanila,vue,lit,preact,solid,qwik 
template/framework

search vite.js and by getting started look for react code to create vite using npm.
copy terminal code and paste by opening the specific folder you want to open vite project(or by selecting integrated terminal)

enter project name after pasting npm create vite@latest this code to create vite project
then after name you have to select frameworkyou want to work only
we will select react
after that select variant we will select javascript right now
after that follow given instruction -> cd react_vite_project
                                        npm install
                                        npm run dev

vite project is created. copy localhost and run it on browser.
in folder notice that the extension is app.jsx



exploring file

here in index.html which is outside of public folder
root is id of div tag.
inside this root things are getting rendered

main.jsx
will create root and render app.jsx file. and then we will render the app component method.

app.jsx
will add element that will connect in main.jsx file and main will render and create root


localhost:5173
http://localhost:5173/


difference between CRA and vite

CRA
it uses Something known as webpack(bundle of modules) 
-> cra provides complete bundle.
->webpack provides us everything at once,hence it makes work a little slower.


vite
-> vite provides partial Bundling(tree shaking conept- imagine we are shaking a tree and fruits and flowers fall down we can use those 
of our  choice). by this concept of using of our choice makes work fast.
*hot module replacement* (interview question) - it means what module we need we will be get served that module.

difference between library and framework
library is a piece of code which we can use on small part of a whole code.
whereas framework is a whole project/apllication itself which applies on whole project.


*Interview topics*
1->fundamental of js- EC,hoisting,TDZ,Closures.
2->functional Programming - HOF->map,filter,reduce,polyfills
3-> oop's concept- classes,constructor,this keyword,prototype and prototype inheritance can apply bind and polyfills
4->Async - callback,promises,async await,polyfills of( promise.all,promise.any),promise methods(.all,.race,.any,.allsettled,combinators)


component - component definition is on app.jsx file
component source-> under src folder->component folder(component name.jsx)because component name is also a javascript file
rules to create a component
- always starts with a captial letter
- always keep the function name as component name (for good practice)

we need a way to adjust the component data in app.jsx file because app file is getting rendered and to display component data 
we have to 
-export component.jsx file in app.jsx


Steps to export
-> write export default mycomponent in mycomponent.jsx file at the end
"why default?" -> because we only have one component and default keyword will make sure that we can use it anywhere in appilcation

Steps to import 
-> write import and component_name where you want to use this commponent {import Mycomponent from "./components/Mycomponent";}

after creating more than one component and importing it we get an error that jsx expression must have a parent element 
means like a section which have them inside it i.e div tag which contains this component element. or a react fragment(will discuss later)


before return statement in component we can write any javascript code life declaration , calling function


* what if we write <Mycomponent/> in main.jsx instead of <App/>?
- so after this mycomponent will become a parent and we have to add all the components under mycomponent file.


//shortcut through react extension
rfce -> shortcut to a readymade snippet for a react component
rcc -> shortcut to a react class based component snippet


Component Reusability
-pasting <component/> more than one time with different data in app.jsx
to print different data we will use props(properties). we can pass data,function etc in props 

props
- props works as an object in react. so what we will do is pass props in component function as object in Mycomponent.jsx file